<?xml version="1.0" encoding="UTF-8"?>
<moya xmlns="http://moyaproject.com"
      xmlns:let="http://moyaproject.com/let"
      xmlns:db="http://moyaproject.com/db"
      xmlns:forms="http://moyaproject.com/forms"
      xmlns:fs="http://moyaproject.com/fs"
      xmlns:img="http://moyaproject.com/image"
      xmlns:tn="http://moyaproject.com/thumbnail">

    <view libname="view.collection.manage" content="#content.collection.manage">
        <db:get model="#Collection" let:slug=".url.collection_name" dst="collection"/>
        <db:get-required model="#Collection" let:uuid=".url.collection_name" dst="collection" if="not collection"/>
    </view>

    <view libname="view.tests" content="#content.tests">
        <db:get-or-create model="#Collection" let:slug="'test'" dst="collection"/>
    </view>

    <macro libname="macro.upload">
        <get-enum enum="#enum.image.type" dst="ImageType"/>
        <let
            edit=".request.GET.edit == 'yes'"
            file=".request.FILES.image"
            image_uuid="uuid:1"
            filename="file.filename"
            default_ext="'jpeg'"
            dst_filename="sub:'${path:image_uuid}.${lower:ext:filename or default_ext}'"
            extension="ext:filename"
            title="trim:[filename, 100]"
            slug="slug or slug:trim:[first:rpartition:[filename,'.'],100]"/>

        <img:read file="file" dst="image_bitmap" filename="filename"/>
        <catch exception="image.*">
            <log-warn>Unable to read image</log-warn>
            <serve-json-object
                let:success="no"
                let:error="'readfail'"
                let:msg="'unable to read image'"/>
        </catch>
        <let exif="image_bitmap.exif"/>
        <let if="exif" 
            taken="parsedatetime:[exif.DateTimeOriginal, '%Y:%m:%d %H:%M:%S'] or None"
            creator="exif.Artist"
            copyright="exif.Copyright"/>
    
        <let copyright=".user.display_name or ''" if="not copyright"/>
        <str dst="copyright" if="copyright">Â© ${taken.year or .now.year} ${copyright}</str>

        <fs:set-contents
            fs="${.app.settings.imagefs}"
            path="${dst_filename}"
            contents="file" />

        <catch exception="*" dst="error">
            <log-warn>Unable to store image file (${error.msg})</log-warn>
            <serve-json-object
                let:success="no"
                let:error="'writefail'"
                let:msg="'unable to store image file'"/>
        </catch>

        <db:atomic>
            <db:create model="#Image" dst="image"
                let:created_time="taken or None"
                let:file="dst_filename"
                let:owner=".user"
                let:creator="creator or .user.display_name_detail or ''"
                let:copyright="copyright"
                let:collection="collection"
                let:type="ImageType.photo"
                let:uploaded_time=".now.utc"
                let:title="title"
                let:slug="slug or None"
                let:original_filename="filename"
                let:filename="filename"
                let:filesize="file.size"
                let:width="image_bitmap.size.width"
                let:height="image_bitmap.size.height"
                let:exif="json:exif"/>
        </db:atomic>
        <catch exception="*" dst="error">
            <log-error>Unable to upload image (${error.msg})</log-error>
            <serve-json-object
                let:error="'savefail'"
                let:msg="'upload failed'"
                let:success="no"/>
        </catch>

        <!-- pre-render thumbnails -->
        <for src=".app.settings.thumbnails.list" dst="thumb" if=".app.settings.thumbnails">
            <timer msg="pre-rendered thumbnails '${thumb}'">
                <tn:generate thumbnails="${thumb}" path="image.file" image="image_bitmap" overwrite="no"/>
            </timer>
        </for>
        <str dst="thumb_url">${image.file|'thumbnail'(processor=thumbnail)}</str>

        <db:delete src="replace_image" if="replace_image"/>

        <!-- for a unique slug if it is not already unique-->
        <let n="0"/>
        <repeat times="100">
            <db:get model="#Image" dst="slug_image"
                filter="#Image.id != image.id"
                let:slug="slug" let:collection="collection"/>
            <break if="not slug_image"/>
            <let slug="slug[:90] +  str:n" image.slug="slug" n="n + 1"/>
        </repeat>

        <render-template template="${template}" dst="image_html"
            let:image="image"
            let:edit="edit"/>
        <serve-json-object
            let:success="True"
            let:image_html="image_html"
            let:thumb_url="thumb_url"
            let:image_id="image.uuid"/>
    </macro>

    <view libname="view.picker.upload" requires="permission:.app.settings.manage_permission">
        <db:get-required model="#Collection" let:uuid=".url.collection" dst="collection"/>
        <let-str template="widgets/manager/manager_image.html"
            thumbnail="manager_tile"/>
        <defer to="#macro.upload"/>
    </view>

    <view libname="view.uploader.upload" requires="permission:.app.settings.uploader_permission">
        <let slug=".url.slug"/>
        <db:get-required model="#Collection" let:uuid=".url.collection" dst="collection"/>
        <db:query src="collection.images" dst="images"
            filter="#Image.slug == slug and #Image.collection == collection"/>
        <let replace_image="images.first or None"/>
     
        <let-str template="widgets/uploader/uploader_image.html"
            thumbnail="large_thumbnail"/>
        <defer to="#macro.upload"/>
    </view>

    <view libname="view.image.serve">
        <db:get-required model="#Image" let:uuid=".url.image" dst="image"/>
        <serve-file fs="${.app.settings.imagefs}" path="${image.file}"/>
    </view>

    <view libname="view.collection.image.serve">
        <db:get-required model="#Collection" let:uuid=".url.collection" dst="collection"/>
        <db:get-required model="#Image" filter="#Image.collection == collection" let:filename=".url.filename" dst="image"/>
        <serve-file fs="${.app.settings.imagefs}" path="${image.file}"/>
    </view>

</moya>
